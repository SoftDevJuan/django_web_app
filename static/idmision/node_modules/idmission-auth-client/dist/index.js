"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  IDmissionTokenGenerator: () => IDmissionTokenGenerator,
  LegacyIDmissionTokenGenerator: () => LegacyIDmissionTokenGenerator
});
module.exports = __toCommonJS(src_exports);
var import_crypto = require("crypto");
var import_https = require("https");
var import_querystring = require("querystring");
var IDmissionTokenGenerator = class {
  constructor(options = {}) {
    var _a, _b, _c, _d, _e;
    this.host = options.host || ((_a = process.env["IDMISSION_AUTH_HOST"]) != null ? _a : "https://auth.idmission.com");
    this.clientId = options.clientId || ((_b = process.env["IDMISSION_CLIENT_ID"]) != null ? _b : "63856");
    this.clientSecret = options.clientSecret || ((_c = process.env["IDMISSION_CLIENT_SECRET"]) != null ? _c : "OOKvveVXNBBIgG9y1LjoRhiDj7df9yv6");
    this.username = options.username || ((_d = process.env["IDMISSION_USERNAME"]) != null ? _d : "ev_integ_CCLJalisco");
    this.password = options.password || ((_e = process.env["IDMISSION_PASSWORD"]) != null ? _e : "Sa#Ab#PN#KU4#N");
    if (!this.host)
      throw new Error("IDmissionTokenGenerator requires host to be set");
    if (!this.clientId)
      throw new Error("IDmissionTokenGenerator requires clientId to be set");
    if (!this.clientSecret)
      throw new Error("IDmissionTokenGenerator requires clientSecret to be set");
    if (!this.username)
      throw new Error("IDmissionTokenGenerator requires username to be set");
    if (!this.password)
      throw new Error("IDmissionTokenGenerator requires password to be set");
  }
  generate() {
    return new Promise((resolve, reject) => {
      const postData = (0, import_querystring.stringify)({
        client_id: this.clientId,
        client_secret: this.clientSecret,
        grant_type: "password",
        scope: "api_access",
        username: this.username,
        password: this.password
      });
      const req = (0, import_https.request)(
        `${this.host}/auth/realms/identity/protocol/openid-connect/token`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Length": postData.length
          }
        },
        (res) => {
          let result = [];
          res.on("data", (chunk) => {
            result.push(chunk);
          });
          res.on("end", () => {
            const resultStr = Buffer.concat(result).toString();
            const response = JSON.parse(resultStr);
            resolve(response);
          });
          res.on("error", (err) => {
            reject(err);
          });
        }
      );
      req.write(postData);
      req.end();
    });
  }
};
var LegacyIDmissionTokenGenerator = class {
  constructor(url, loginId, password) {
    var _a, _b, _c;
    this.url = url || ((_a = process.env["IDMISSION_URL"]) != null ? _a : "");
    this.loginId = loginId || ((_b = process.env["IDMISSION_LOGIN_ID"]) != null ? _b : "");
    this.password = password || ((_c = process.env["IDMISSION_PASSWORD"]) != null ? _c : "");
  }
  generate() {
    return new Promise((resolve, reject) => {
      const requestId = (0, import_crypto.randomBytes)(20).toString("hex");
      const postData = (0, import_querystring.stringify)({
        loginId: this.loginId,
        password: this.password,
        requestId
      });
      const options = {
        method: "POST",
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          "Content-Length": postData.length
        }
      };
      const req = (0, import_https.request)(`${this.url}/apps/generateToken`, options, (res) => {
        let result = [];
        res.on("data", (chunk) => {
          result.push(chunk);
        });
        res.on("end", () => {
          const response = JSON.parse(Buffer.concat(result).toString());
          if (response.statusCode === "000") {
            resolve(response.data);
          } else {
            reject(new Error(response.statusMessage));
          }
        });
        res.on("error", (err) => {
          reject(err);
        });
      });
      req.write(postData);
      req.end();
    });
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  IDmissionTokenGenerator,
  LegacyIDmissionTokenGenerator
});
