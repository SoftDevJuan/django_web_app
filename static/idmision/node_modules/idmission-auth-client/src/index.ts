import {request} from 'https';
import {stringify} from 'querystring';

export type TokenData = {
    access_token: string
    expires_in: number
    refresh_expires_in: number
    token_type: 'Bearer'
    session_state: string
    scope: string
}

export type IDmissionTokenGeneratorOptions = {
    host?: string
    clientId?: string
    clientSecret?: string
    username?: string
    password?: string
}

export class IDmissionTokenGenerator {
    host: string
    clientId: string
    clientSecret: string
    username: string
    password: string

    constructor(options: IDmissionTokenGeneratorOptions = {}) {
        this.host = options.host || (process.env['IDMISSION_AUTH_HOST'] ?? '');
        this.clientId = options.clientId || (process.env['IDMISSION_CLIENT_ID'] ?? '')
        this.clientSecret = options.clientSecret || (process.env['IDMISSION_CLIENT_SECRET'] ?? '')
        this.username = options.username || (process.env['IDMISSION_USERNAME'] ?? '')
        this.password = options.password || (process.env['IDMISSION_PASSWORD'] ?? '')

        if (!this.host)
            throw new Error('IDmissionTokenGenerator requires host to be set')
        if (!this.clientId)
            throw new Error('IDmissionTokenGenerator requires clientId to be set')
        if (!this.clientSecret)
            throw new Error('IDmissionTokenGenerator requires clientSecret to be set')
        if (!this.username)
            throw new Error('IDmissionTokenGenerator requires username to be set')
        if (!this.password)
            throw new Error('IDmissionTokenGenerator requires password to be set')
    }

    generate(): Promise<TokenData> {
        return new Promise((resolve, reject) => {
            const postData = stringify({
                client_id: this.clientId,
                client_secret: this.clientSecret,
                grant_type: 'password',
                scope: 'api_access',
                username: this.username,
                password: this.password,
            });

            const req = request(
              `${this.host}/auth/realms/identity/protocol/openid-connect/token`,
              {
                  method: 'POST',
                  headers: {
                      'Content-Type': 'application/x-www-form-urlencoded',
                      'Content-Length': postData.length,
                  },
              },
              (res) => {
                  let result: Uint8Array[] = [];
                  res.on('data', (chunk: Uint8Array) => {
                      result.push(chunk);
                  })
                  res.on('end', () => {
                      const resultStr = Buffer.concat(result).toString();
                      const response: TokenData = JSON.parse(resultStr);
                      resolve(response);
                  });
                  res.on('error', err => {
                      reject(err);
                  })
              },
            )

            req.write(postData);
            req.end();
        })
    }
}
